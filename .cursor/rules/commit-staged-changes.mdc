# Commit Staged Changes with Conventional Commits

## Trigger Phrases
This prompt is activated by any of these phrases:
- "commit changes"
- "commit staged"
- "commit with conventional message"
- "commit following guidelines"
- "commit with proper format"
- "commit staged changes"
- "commit with conventional commits"

## Context
You are committing staged changes to the FileHashDatabase repository using a commit message that follows the project's commit message guidelines.

## Commit Message Guidelines
- **Format**: Follow [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)
- **Header limit**: Maximum 50 characters (including the initial `<type>[optional scope]: `)
- **Body line limit**: Maximum 72 characters per line
- **Language**: British English
- **Structure**: `<type>[optional scope]: <description>`

## Conventional Commit Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `chore`: Changes to the build process or auxiliary tools and libraries such as documentation generation

## Workflow Instructions

### Step 1: Check Staged Changes
1. Check what files are currently staged for commit
2. Analyse the nature of the changes (additions, modifications, deletions)
3. Determine the appropriate commit type based on the changes

### Step 2: Generate Commit Message
1. **Determine type**: Based on the staged changes, select the appropriate conventional commit type
2. **Optional scope**: Add scope if relevant (e.g., `feat(module)`, `fix(tests)`)
3. **Description**: Write a clear, concise description in British English
4. **Body**: If needed, add a detailed explanation with proper line wrapping
5. **Footer**: Add any breaking changes, issue references, or co-authors if applicable

### Step 3: Validate Commit Message
1. Ensure header is ≤ 50 characters
2. Ensure body lines are ≤ 72 characters
3. Verify British English spelling and grammar
4. Confirm conventional commit format compliance

### Step 4: Execute Commit
1. **Commit format**: Use exactly two `-m` parameters:
   - First `-m`: Header message (conventional commit format)
   - Second `-m`: Complete body message with newline characters (`\n`) for line breaks
2. **Avoid multiple `-m` parameters** as they create unwanted blank lines
3. Verify the commit was successful
4. Display the commit hash and summary

## Output Format
Provide:
1. **Staged Files Summary**: List of files staged for commit
2. **Change Analysis**: Type and nature of changes
3. **Proposed Commit Message**: Full commit message following guidelines
4. **Commit Execution**: Status of the commit operation
5. **Commit Details**: Hash and summary of the created commit

## Example Usage
When you see any of the trigger phrases above, automatically:
1. Check what files are staged using `git status --porcelain`
2. Analyse the changes to determine the commit type
3. Generate a conventional commit message following the guidelines
4. Validate the message format and character limits
5. **Execute commit with two `-m` parameters**:
   - `git commit -m "header" -m "body with \n line breaks"`
6. Confirm the commit was successful

### Quick Commands
Instead of manual git commands, you can now use:
- `commit changes` - Quickest option
- `commit staged` - Alternative short command
- `commit with conventional message` - More explicit

## Example Commit Messages

### Header Examples:
- `feat: add new file hash validation function`
- `fix(tests): resolve module import failures in unit tests`
- `docs: update README with installation instructions`
- `refactor: improve error handling in database operations`
- `style: fix code formatting and indentation`
- `test: add comprehensive test coverage for new functions`
- `chore: update build scripts for PowerShell 5.1 compatibility`

### Body Examples:
```
Add comprehensive validation function for file hashes.\n\nThis function validates SHA256 hashes and provides detailed error messages for invalid formats. Includes unit tests and documentation updates.
```

```
Resolve module import failures in unit tests.\n\nFixed missing function exports and updated test expectations to match actual module structure. All tests now pass successfully.
```

Remember: Always use British English spelling and ensure the commit message clearly describes the changes made.
description: Commits staged changes with conventional commit messages following project guidelines
globs:
alwaysApply: false
---
description:
globs:
alwaysApply: false
---
