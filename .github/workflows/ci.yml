name: PowerShell Module CI
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        powershell-version: [7.4]
        include:
          - os: windows-latest
            powershell-version: 5.1
            shell: powershell

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache PowerShell modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/powershell/Modules
          ~/Documents/PowerShell/Modules
          C:\Users\runneradmin\Documents\PowerShell\Modules
        key: ${{ runner.os }}-powershell-${{ matrix.powershell-version }}-${{ hashFiles('src/FileHashDatabase.psd1') }}

    - name: Install required modules
      shell: ${{ startsWith(matrix.os, 'windows') && matrix.powershell-version == '5.1' && 'powershell' || 'pwsh' }}
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -RequiredVersion 5.6.0 -Force -Scope CurrentUser
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        Install-Module -Name PSSQLite -Force -Scope CurrentUser

    - name: Run PSScriptAnalyzer
      shell: ${{ matrix.shell || 'pwsh' }}
      run: |
        $results = Invoke-ScriptAnalyzer -Path ./src -Recurse -Settings PSGallery
        $results | Export-Clixml -Path "analyzer-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}.xml"
        if ($results) {
          $results | Out-String | Write-Host
          Write-Warning "PSScriptAnalyzer found $($results.Count) issues"
        } else {
          Write-Host "PSScriptAnalyzer found no issues"
        }

    - name: Import module for testing
      shell: ${{ matrix.shell || 'pwsh' }}
      run: |
        Import-Module ./src/FileHashDatabase.psd1 -Force

    - name: Run Pester Tests
      shell: ${{ matrix.shell || 'pwsh' }}
      run: |
        $config = New-PesterConfiguration
        $config.Run.Path = "./Tests"
        $config.CodeCoverage.Enabled = $true
        $config.CodeCoverage.Path = "./src"
        $config.CodeCoverage.OutputPath = "./coverage.xml"
        $config.CodeCoverage.OutputFormat = "JaCoCo"
        $config.CodeCoverage.CoveragePercentTarget = 70
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputPath = "./test-results.xml"
        $config.TestResult.OutputFormat = "NUnitXml"
        $config.Output.Verbosity = "Detailed"

        $result = Invoke-Pester -Configuration $config

        Write-Host "Code Coverage: $($result.CodeCoverage.CoveragePercent)%"

        if ($result.FailedCount -gt 0) {
          Write-Error "Tests failed: $($result.FailedCount) out of $($result.TotalCount)"
          exit 1
        }

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
        path: |
          coverage.xml
          test-results.xml
          analyzer-results-*.xml
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.powershell-version == '7.4'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: FileHashDatabase-coverage
        fail_ci_if_error: false
