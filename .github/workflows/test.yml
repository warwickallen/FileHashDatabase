name: PowerShell Cross-Platform Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test-powershell:
    strategy:
      matrix:
        include:
          # Windows PowerShell 5.1
          - os: windows-latest
            powershell-version: "5.1"
            shell-type: "powershell"
          # Windows PowerShell 7.x
          - os: windows-latest
            powershell-version: "7.4"
            shell-type: "pwsh"
          # Ubuntu PowerShell 7.x
          - os: ubuntu-latest
            powershell-version: "7.4"
            shell-type: "pwsh"
          # macOS PowerShell 7.x
          - os: macos-latest
            powershell-version: "7.4"
            shell-type: "pwsh"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install PowerShell Core (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install PowerShell 7.4 on Ubuntu
        wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
        sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb
        sudo apt-get install -f
        pwsh --version

    - name: Install PowerShell Core (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install PowerShell 7.4 on macOS
        brew install --cask powershell
        pwsh --version

    - name: Verify PowerShell Installation (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        Write-Host "PowerShell edition: $($PSVersionTable.PSEdition)"
        Write-Host "Platform: $($PSVersionTable.Platform)"

    - name: Verify PowerShell Installation (PowerShell Core)
      if: matrix.powershell-version != '5.1'
      shell: pwsh
      run: |
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        Write-Host "PowerShell edition: $($PSVersionTable.PSEdition)"
        Write-Host "Platform: $($PSVersionTable.Platform)"

    - name: Install Pester (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        try {
          Write-Host "Installing Pester for PowerShell 5.1..."
          Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -AllowClobber

          $PesterVersion = Get-Module -ListAvailable -Name Pester | Select-Object -First 1 -ExpandProperty Version
          Write-Host "Pester version installed: $PesterVersion"
        }
        catch {
          Write-Error "Failed to install Pester: $($_.Exception.Message)"
          exit 1
        }

    - name: Install Pester (PowerShell Core)
      if: matrix.powershell-version != '5.1'
      shell: pwsh
      run: |
        try {
          Write-Host "Installing Pester for PowerShell Core..."
          Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -AllowClobber

          $PesterVersion = Get-Module -ListAvailable -Name Pester | Select-Object -First 1 -ExpandProperty Version
          Write-Host "Pester version installed: $PesterVersion"
        }
        catch {
          Write-Error "Failed to install Pester: $($_.Exception.Message)"
          exit 1
        }

    - name: Install SQLite Dependencies (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        try {
          Write-Host "PowerShell 5.1 - using built-in System.Data.SQLite support"

          # List any SQLite-related modules
          Get-Module -ListAvailable | Where-Object Name -like "*SQLite*" | Select-Object Name, Version
        }
        catch {
          Write-Warning "SQLite module check failed: $($_.Exception.Message)"
          Write-Host "Continuing - PowerShell 5.1 should have built-in SQLite support"
        }

    - name: Install SQLite Dependencies (PowerShell Core)
      if: matrix.powershell-version != '5.1'
      shell: pwsh
      run: |
        try {
          Write-Host "Installing SQLite dependencies for PowerShell Core..."
          # Try to install PSSQLite for cross-platform compatibility
          Install-Module -Name PSSQLite -Force -SkipPublisherCheck -Scope CurrentUser -ErrorAction SilentlyContinue

          # List installed modules
          Get-Module -ListAvailable | Where-Object Name -like "*SQLite*" | Select-Object Name, Version
        }
        catch {
          Write-Warning "SQLite module installation failed: $($_.Exception.Message)"
          Write-Host "Continuing without SQLite module - tests may need to handle this"
        }

    - name: List Module Files and Import Module (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        Write-Host "Repository contents:"
        Get-ChildItem -Path . -Recurse -File | Where-Object Extension -in @('.ps1', '.psm1', '.psd1') | Select-Object FullName

        Write-Host "`nLooking for module manifest:"
        $ManifestFiles = Get-ChildItem -Path . -Filter "*.psd1" -Recurse
        $ManifestFiles | ForEach-Object { Write-Host "Found: $($_.FullName)" }

        Write-Host "`nLooking for test files:"
        $TestFiles = Get-ChildItem -Path . -Filter "*.Tests.ps1" -Recurse
        $TestFiles | ForEach-Object { Write-Host "Found: $($_.FullName)" }

        Write-Host "`nAttempting to import module..."
        if ($ManifestFiles.Count -gt 0) {
          $ModulePath = $ManifestFiles[0].FullName
          Write-Host "Importing module from: $ModulePath"
          try {
            Import-Module $ModulePath -Force
            Write-Host "Module imported successfully!"

            # List exported functions
            $ExportedCommands = Get-Command -Module (Split-Path (Split-Path $ModulePath -Parent) -Leaf)
            if ($ExportedCommands.Count -gt 0) {
              Write-Host "Exported commands:"
              $ExportedCommands | Format-Table Name, CommandType -AutoSize
            }
          }
          catch {
            Write-Error "Failed to import module: $($_.Exception.Message)"
          }
        }

    - name: List Module Files and Import Module (PowerShell Core)
      if: matrix.powershell-version != '5.1'
      shell: pwsh
      run: |
        Write-Host "Repository contents:"
        Get-ChildItem -Path . -Recurse -File | Where-Object Extension -in @('.ps1', '.psm1', '.psd1') | Select-Object FullName

        Write-Host "`nLooking for module manifest:"
        $ManifestFiles = Get-ChildItem -Path . -Filter "*.psd1" -Recurse
        $ManifestFiles | ForEach-Object { Write-Host "Found: $($_.FullName)" }

        Write-Host "`nLooking for test files:"
        $TestFiles = Get-ChildItem -Path . -Filter "*.Tests.ps1" -Recurse
        $TestFiles | ForEach-Object { Write-Host "Found: $($_.FullName)" }

        Write-Host "`nAttempting to import module..."
        if ($ManifestFiles.Count -gt 0) {
          $ModulePath = $ManifestFiles[0].FullName
          Write-Host "Importing module from: $ModulePath"
          try {
            Import-Module $ModulePath -Force
            Write-Host "Module imported successfully!"

            # List exported functions
            $ModuleName = (Get-Item $ModulePath).BaseName
            $ExportedCommands = Get-Command -Module $ModuleName
            if ($ExportedCommands.Count -gt 0) {
              Write-Host "Exported commands:"
              $ExportedCommands | Format-Table Name, CommandType -AutoSize
            }
          }
          catch {
            Write-Error "Failed to import module: $($_.Exception.Message)"
          }
        }

    - name: Run Pester Tests (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        try {
          Import-Module Pester -Force

          # Import the module under test first
          Write-Host "Importing module under test..."
          $ManifestFiles = Get-ChildItem -Path . -Filter "*.psd1" -Recurse
          if ($ManifestFiles.Count -gt 0) {
            $ModulePath = $ManifestFiles[0].FullName
            Import-Module $ModulePath -Force
            Write-Host "Module imported: $ModulePath"
          }

          # Find test files
          $TestFiles = Get-ChildItem -Path . -Filter "*.Tests.ps1" -Recurse

          if ($TestFiles.Count -eq 0) {
            Write-Warning "No test files found matching pattern '*.Tests.ps1'"
            Write-Host "Looking for alternative test patterns..."
            $TestFiles = Get-ChildItem -Path . -Filter "*Test*.ps1" -Recurse
          }

          if ($TestFiles.Count -eq 0) {
            Write-Error "No test files found!"
            exit 1
          }

          Write-Host "Found test files:"
          $TestFiles | ForEach-Object { Write-Host "  - $($_.FullName)" }

          # Configure Pester based on version
          $PesterVersion = (Get-Module -ListAvailable -Name Pester | Select-Object -First 1).Version
          Write-Host "Using Pester version: $PesterVersion"

          if ($PesterVersion.Major -ge 5) {
            Write-Host "Running Pester 5.x tests..."
            $Config = New-PesterConfiguration
            $Config.Run.Path = $TestFiles.FullName
            $Config.TestResult.Enabled = $true
            $Config.TestResult.OutputFormat = "NUnitXml"
            $Config.TestResult.OutputPath = "TestResults.xml"
            $Config.Output.Verbosity = "Detailed"

            $TestResults = Invoke-Pester -Configuration $Config
            $FailedCount = $TestResults.FailedCount
          } else {
            Write-Host "Running Pester 4.x tests..."
            $TestResults = Invoke-Pester -Path $TestFiles.FullName -OutputFormat NUnitXml -OutputFile "TestResults.xml" -PassThru
            $FailedCount = $TestResults.FailedCount
          }

          Write-Host "Test Results Summary:"
          Write-Host "  Total: $($TestResults.TotalCount)"
          Write-Host "  Passed: $($TestResults.PassedCount)"
          Write-Host "  Failed: $FailedCount"

          if ($FailedCount -gt 0) {
            Write-Error "Tests failed! $FailedCount test(s) failed."
            exit 1
          }

          Write-Host "All tests passed!"
        }
        catch {
          Write-Error "Test execution failed: $($_.Exception.Message)"
          Write-Host "Stack trace:"
          Write-Host $_.ScriptStackTrace
          exit 1
        }

    - name: Run Pester Tests (PowerShell Core)
      if: matrix.powershell-version != '5.1'
      shell: pwsh
      run: |
        try {
          Import-Module Pester -Force

          # Import the module under test first
          Write-Host "Importing module under test..."
          $ManifestFiles = Get-ChildItem -Path . -Filter "*.psd1" -Recurse
          if ($ManifestFiles.Count -gt 0) {
            $ModulePath = $ManifestFiles[0].FullName
            Import-Module $ModulePath -Force
            Write-Host "Module imported: $ModulePath"
          }

          # Find test files
          $TestFiles = Get-ChildItem -Path . -Filter "*.Tests.ps1" -Recurse

          if ($TestFiles.Count -eq 0) {
            Write-Warning "No test files found matching pattern '*.Tests.ps1'"
            Write-Host "Looking for alternative test patterns..."
            $TestFiles = Get-ChildItem -Path . -Filter "*Test*.ps1" -Recurse
          }

          if ($TestFiles.Count -eq 0) {
            Write-Error "No test files found!"
            exit 1
          }

          Write-Host "Found test files:"
          $TestFiles | ForEach-Object { Write-Host "  - $($_.FullName)" }

          # Configure Pester based on version
          $PesterVersion = (Get-Module -ListAvailable -Name Pester | Select-Object -First 1).Version
          Write-Host "Using Pester version: $PesterVersion"

          if ($PesterVersion.Major -ge 5) {
            Write-Host "Running Pester 5.x tests..."
            $Config = New-PesterConfiguration
            $Config.Run.Path = $TestFiles.FullName
            $Config.TestResult.Enabled = $true
            $Config.TestResult.OutputFormat = "NUnitXml"
            $Config.TestResult.OutputPath = "TestResults.xml"
            $Config.Output.Verbosity = "Detailed"

            $TestResults = Invoke-Pester -Configuration $Config
            $FailedCount = $TestResults.FailedCount
          } else {
            Write-Host "Running Pester 4.x tests..."
            $TestResults = Invoke-Pester -Path $TestFiles.FullName -OutputFormat NUnitXml -OutputFile "TestResults.xml" -PassThru
            $FailedCount = $TestResults.FailedCount
          }

          Write-Host "Test Results Summary:"
          Write-Host "  Total: $($TestResults.TotalCount)"
          Write-Host "  Passed: $($TestResults.PassedCount)"
          Write-Host "  Failed: $FailedCount"

          if ($FailedCount -gt 0) {
            Write-Error "Tests failed! $FailedCount test(s) failed."
            exit 1
          }

          Write-Host "All tests passed!"
        }
        catch {
          Write-Error "Test execution failed: $($_.Exception.Message)"
          Write-Host "Stack trace:"
          Write-Host $_.ScriptStackTrace
          exit 1
        }

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
        path: TestResults.xml
        if-no-files-found: warn

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() && matrix.os == 'windows-latest'
      with:
        files: TestResults.xml
        check_name: "Test Results (${{ matrix.os }}, PowerShell ${{ matrix.powershell-version }})"

  code-analysis:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        try {
          Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Scope CurrentUser

          Write-Host "Running PSScriptAnalyzer..."
          # Analyse all PowerShell files
          $AnalysisResults = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery

          if ($AnalysisResults) {
            Write-Host "PSScriptAnalyzer found issues:"
            $AnalysisResults | Format-Table -AutoSize

            # Count issues by severity
            $ErrorCount = ($AnalysisResults | Where-Object Severity -eq 'Error').Count
            $WarningCount = ($AnalysisResults | Where-Object Severity -eq 'Warning').Count
            $InfoCount = ($AnalysisResults | Where-Object Severity -eq 'Information').Count

            Write-Host "Issues found:"
            Write-Host "  Errors: $ErrorCount"
            Write-Host "  Warnings: $WarningCount"
            Write-Host "  Information: $InfoCount"

            # Only fail on errors, not warnings
            if ($ErrorCount -gt 0) {
              Write-Error "PSScriptAnalyzer found $ErrorCount error(s)!"
              exit 1
            } else {
              Write-Host "No errors found, but $WarningCount warning(s) present."
            }
          } else {
            Write-Host "No PSScriptAnalyzer issues found!"
          }
        }
        catch {
          Write-Error "PSScriptAnalyzer failed: $($_.Exception.Message)"
          exit 1
        }

  build-validation:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate Module Structure
      shell: pwsh
      run: |
        try {
          Write-Host "Validating module structure..."

          # Check if module manifest exists
          $ManifestFiles = Get-ChildItem -Path . -Filter "*.psd1" -Recurse

          if ($ManifestFiles.Count -eq 0) {
            Write-Error "No module manifest (.psd1) found!"
            exit 1
          }

          if ($ManifestFiles.Count -gt 1) {
            Write-Warning "Multiple module manifests found:"
            $ManifestFiles | ForEach-Object { Write-Host "  - $($_.FullName)" }
          }

          $ManifestPath = $ManifestFiles[0].FullName
          Write-Host "Using module manifest: $ManifestPath"

          # Test the module manifest
          Write-Host "Testing module manifest..."
          $TestResult = Test-ModuleManifest -Path $ManifestPath

          Write-Host "Module manifest validation successful!"
          Write-Host "  Module Name: $($TestResult.Name)"
          Write-Host "  Module Version: $($TestResult.Version)"
          Write-Host "  PowerShell Version: $($TestResult.PowerShellVersion)"
          Write-Host "  Author: $($TestResult.Author)"
          Write-Host "  Description: $($TestResult.Description)"

          # Try to import the module
          Write-Host "Attempting to import module..."
          Import-Module $ManifestPath -Force
          Write-Host "Module imported successfully!"

          # List exported functions
          $ExportedCommands = Get-Command -Module $TestResult.Name
          if ($ExportedCommands.Count -gt 0) {
            Write-Host "Exported commands:"
            $ExportedCommands | Format-Table Name, CommandType -AutoSize
          } else {
            Write-Warning "No exported commands found in module"
          }

          Write-Host "Module validation completed successfully!"
        }
        catch {
          Write-Error "Module validation failed: $($_.Exception.Message)"
          Write-Host "Stack trace:"
          Write-Host $_.ScriptStackTrace
          exit 1
        }
