name: PowerShell Cross-Platform Tests

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test-powershell:
    strategy:
      fail-fast: false  # Allow other tests to continue if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: ['7.4']
        include:
          # Test Windows PowerShell 5.1 on Windows only
          - os: windows-latest
            powershell-version: '5.1'

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify PowerShell Installation
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)"
        Write-Host "OS: $($PSVersionTable.OS)"
        if ($PSVersionTable.PSVersion.Major -ge 6) {
          Write-Host "Platform: $($PSVersionTable.Platform)"
        }

    - name: Verify PowerShell 5.1 (Windows only)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)"
        Write-Host "OS: $($PSVersionTable.OS)"

    - name: Install Pester
      shell: pwsh
      run: |
        Write-Host "Installing Pester..."
        if ($PSVersionTable.PSVersion.Major -ge 7) {
            Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -MinimumVersion 5.0.0
        } else {
            Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -RequiredVersion 4.10.1
        }
        Import-Module Pester -Force
        Write-Host "Pester version: $((Get-Module Pester).Version)"

    - name: Install Pester (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        Write-Host "Installing Pester for PowerShell 5.1..."
        Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -RequiredVersion 4.10.1
        Import-Module Pester -Force
        Write-Host "Pester version: $((Get-Module Pester).Version)"

    - name: Install PSSQLite (if available)
      shell: pwsh
      continue-on-error: true  # Don't fail if PSSQLite can't be installed
      run: |
        Write-Host "Attempting to install PSSQLite..."
        try {
            if ($PSVersionTable.PSVersion.Major -ge 6) {
                if (Get-Variable -Name 'IsLinux' -ErrorAction SilentlyContinue -ValueOnly) {
                    Write-Host "Installing on Linux system..."
                } elseif (Get-Variable -Name 'IsMacOS' -ErrorAction SilentlyContinue -ValueOnly) {
                    Write-Host "Installing on macOS system..."
                } else {
                    Write-Host "Installing on Windows system..."
                }
            }
            Install-Module -Name PSSQLite -Force -SkipPublisherCheck -Scope CurrentUser -ErrorAction Stop
            Import-Module PSSQLite -Force
            Write-Host "PSSQLite installed successfully"
        } catch {
            Write-Warning "Could not install PSSQLite: $($_.Exception.Message)"
            Write-Host "Tests will run with PSSQLite functionality disabled"
        }

    - name: Install PSSQLite (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      continue-on-error: true
      run: |
        Write-Host "Attempting to install PSSQLite for PowerShell 5.1..."
        try {
            Install-Module -Name PSSQLite -Force -SkipPublisherCheck -Scope CurrentUser -ErrorAction Stop
            Import-Module PSSQLite -Force
            Write-Host "PSSQLite installed successfully"
        } catch {
            Write-Warning "Could not install PSSQLite: $($_.Exception.Message)"
            Write-Host "Tests will run with PSSQLite functionality disabled"
        }

    - name: Test Module Import
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)"
        if ($PSVersionTable.PSVersion.Major -ge 6) {
          Write-Host "Platform: $($PSVersionTable.Platform)"
        }

        $ModulePath = "./FileHashDatabase/FileHashDatabase.psd1"
        Write-Host "Module path: $ModulePath"

        if (-not (Test-Path $ModulePath)) {
            throw "Module manifest not found at: $ModulePath"
        }

        Write-Host "Testing module manifest..."
        Test-ModuleManifest -Path $ModulePath -Verbose

        Write-Host "Importing module..."
        Import-Module $ModulePath -Force -Verbose

        Write-Host "Checking exported functions..."
        $ExportedCommands = Get-Command -Module FileHashDatabase
        Write-Host "Exported commands: $($ExportedCommands.Name -join ', ')"

        if ($ExportedCommands.Count -eq 0) {
            throw "No commands were exported from the module"
        }

    - name: Test Module Import (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)"

        $ModulePath = "./FileHashDatabase/FileHashDatabase.psd1"
        Write-Host "Module path: $ModulePath"

        if (-not (Test-Path $ModulePath)) {
            throw "Module manifest not found at: $ModulePath"
        }

        Write-Host "Testing module manifest..."
        Test-ModuleManifest -Path $ModulePath -Verbose

        Write-Host "Importing module..."
        Import-Module $ModulePath -Force -Verbose

        Write-Host "Checking exported functions..."
        $ExportedCommands = Get-Command -Module FileHashDatabase
        Write-Host "Exported commands: $($ExportedCommands.Name -join ', ')"

        if ($ExportedCommands.Count -eq 0) {
            throw "No commands were exported from the module"
        }

    - name: Run Tests
      shell: pwsh
      continue-on-error: true  # Don't stop workflow on test failures
      env:
        TEST_MODULE_PATH: ${{ github.workspace }}/FileHashDatabase/FileHashDatabase.psd1
      run: |
        Write-Host "Starting Pester tests..."

        # Set up test configuration based on Pester version
        $PesterVersion = (Get-Module Pester).Version.Major
        Write-Host "Pester version: $PesterVersion"

        $TestResultsPath = "TestResults.xml"

        if ($PesterVersion -ge 5) {
            # Pester 5+ configuration
            $PesterConfig = New-PesterConfiguration
            $PesterConfig.Run.Path = "./Tests"
            $PesterConfig.Run.Exit = $false  # Don't exit PowerShell on completion
            $PesterConfig.TestResult.Enabled = $true
            $PesterConfig.TestResult.OutputPath = $TestResultsPath
            $PesterConfig.TestResult.OutputFormat = "NUnitXml"
            $PesterConfig.Output.Verbosity = "Detailed"

            Write-Host "Running tests with Pester 5+ configuration..."
            $TestResults = Invoke-Pester -Configuration $PesterConfig
        } else {
            # Pester 4.x configuration
            Write-Host "Running tests with Pester 4.x configuration..."
            $TestResults = Invoke-Pester -Path "./Tests" -OutputFile $TestResultsPath -OutputFormat NUnitXml -PassThru -Verbose
        }

        Write-Host "Test Results Summary:"
        Write-Host "  Total: $($TestResults.TotalCount)"
        Write-Host "  Passed: $($TestResults.PassedCount)"
        Write-Host "  Failed: $($TestResults.FailedCount)"
        Write-Host "  Skipped: $($TestResults.SkippedCount)"

        # Set environment variable for later steps
        if ($TestResults.FailedCount -gt 0) {
            Write-Host "##vso[task.setvariable variable=TestsFailed]true"
            Write-Host "Some tests failed, but continuing to upload results..."
        }

    - name: Run Tests (PowerShell 5.1)
      if: matrix.powershell-version == '5.1'
      shell: powershell
      continue-on-error: true
      env:
        TEST_MODULE_PATH: ${{ github.workspace }}/FileHashDatabase/FileHashDatabase.psd1
      run: |
        Write-Host "Starting Pester tests for PowerShell 5.1..."

        # PowerShell 5.1 uses Pester 4.x
        Write-Host "Running tests with Pester 4.x configuration..."
        $TestResultsPath = "TestResults.xml"
        $TestResults = Invoke-Pester -Path "./Tests" -OutputFile $TestResultsPath -OutputFormat NUnitXml -PassThru -Verbose

        Write-Host "Test Results Summary:"
        Write-Host "  Total: $($TestResults.TotalCount)"
        Write-Host "  Passed: $($TestResults.PassedCount)"
        Write-Host "  Failed: $($TestResults.FailedCount)"
        Write-Host "  Skipped: $($TestResults.SkippedCount)"

        # Set environment variable for later steps
        if ($TestResults.FailedCount -gt 0) {
            Write-Host "##vso[task.setvariable variable=TestsFailed]true"
            Write-Host "Some tests failed, but continuing to upload results..."
        }

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()  # Always upload, even if tests failed
      with:
        name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
        path: TestResults.xml
        retention-days: 30

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()  # Always publish results
      with:
        name: Test Results (${{ matrix.os }}, PowerShell ${{ matrix.powershell-version }})
        path: TestResults.xml
        reporter: java-junit
        fail-on-error: false  # Don't fail the workflow based on test results here

    - name: Check Test Results
      shell: pwsh
      if: always()
      run: |
        if ($env:TestsFailed -eq 'true') {
            Write-Host "Tests failed - marking step as failed"
            exit 1
        } else {
            Write-Host "All tests passed"
        }

    - name: Check Test Results (PowerShell 5.1)
      if: always() && matrix.powershell-version == '5.1'
      shell: powershell
      run: |
        if ($env:TestsFailed -eq 'true') {
            Write-Host "Tests failed - marking step as failed"
            exit 1
        } else {
            Write-Host "All tests passed"
        }
